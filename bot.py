import logging
import requests
import csv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes
from telegram.ext.filters import TEXT, COMMAND

# Set up logging
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets URL (CSV Format)
DECISION_POINTS_URL = "https://docs.google.com/spreadsheets/d/1sOqCrOl-kTKKQQ0ioYzYkqJwRM9qxsndxiLmo_RDZjI/export?format=csv&gid=0"

# Fetch data from Google Sheets
def fetch_csv_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        decoded_content = response.content.decode("utf-8")
        data = list(csv.reader(decoded_content.splitlines(), delimiter=","))
        logger.info("Fetched data: %s", data)  # Log fetched data
        return data
    except Exception as e:
        logger.error("Error fetching CSV data: %s", e)
        return []

# /start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Handling /start from user: %s", update.effective_user.username)
    context.user_data['current_point'] = 0
    context.user_data['score'] = 0
    context.user_data['time'] = 0
    context.user_data['prestige_stars'] = 0

    welcome_message = (
        "üéÆ **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi GameFi Nh·∫≠p Vai!** üéâ\n\n"
        "B·∫°n s·∫Ω b∆∞·ªõc v√†o m·ªôt h√†nh tr√¨nh phi√™u l∆∞u ƒë·∫ßy th√°ch th·ª©c.\n"
        "‚è© G√µ /play ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh c·ªßa b·∫°n!"
    )
    if update.message:
        await update.message.reply_text(welcome_message, parse_mode="Markdown")

# /play command handler
async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("User %s started playing", update.effective_user.username)
    decision_points = fetch_csv_data(DECISION_POINTS_URL)
    if not decision_points:
        if update.message:
            await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu tr√≤ ch∆°i. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return

    current_point = context.user_data.get('current_point', 0)
    if current_point >= len(decision_points):
        await summarize_game(update, context)
        return

    try:
        # Parse the current decision point
        point = decision_points[current_point]
        scenario = point[0]
        option_1 = point[1]
        time_1 = point[2]
        option_2 = point[3]
        time_2 = point[4]

        # Log the current decision point
        logger.info("Current decision point: %s", point)

        # Save the current scenario
        context.user_data['current_scenario'] = {
            "scenario": scenario,
            "option_1": option_1,
            "time_1": time_1,
            "option_2": option_2,
            "time_2": time_2,
        }

        message = (
            f"üó∫Ô∏è *{scenario}*\n\n"
            f"1Ô∏è‚É£ {option_1} (+{time_1} gi√¢y)\n"
            f"2Ô∏è‚É£ {option_2} (+{time_2} gi√¢y)\n\n"
            f"‚è© Nh·∫≠p s·ªë 1 ho·∫∑c 2 ƒë·ªÉ ch·ªçn."
        )
        if update.message:
            await update.message.reply_text(message, parse_mode="Markdown")
    except IndexError as e:
        logger.error("Error parsing decision point: %s", e)
        if update.message:
            await update.message.reply_text("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.")

# Handle user choices
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text
    current_scenario = context.user_data.get('current_scenario', None)

    if not current_scenario or user_choice not in ['1', '2']:
        if update.message:
            await update.message.reply_text("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2.")
        return

    choice_key = 'option_1' if user_choice == '1' else 'option_2'
    time_key = 'time_1' if user_choice == '1' else 'time_2'

    chosen_option = current_scenario[choice_key]
    time_cost = int(current_scenario[time_key])
    context.user_data['time'] += time_cost

    response = (
        f"‚úÖ B·∫°n ƒë√£ ch·ªçn: {chosen_option}\n"
        f"‚è±Ô∏è Th·ªùi gian th√™m: {time_cost} gi√¢y.\n"
    )
    if update.message:
        await update.message.reply_text(response)

    # Proceed to the next point
    context.user_data['current_point'] += 1
    await play(update, context)

# Summarize the game
async def summarize_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    score = context.user_data.get('score', 0)
    time = context.user_data.get('time', 0)
    prestige_stars = context.user_data.get('prestige_stars', 0)

    summary = (
        f"üéâ **H√†nh tr√¨nh c·ªßa b·∫°n ƒë√£ k·∫øt th√∫c!** üéâ\n\n"
        f"‚è≥ *T·ªïng th·ªùi gian:* **{time} gi√¢y**\n"
        f"üèÜ *T·ªïng ƒëi·ªÉm:* **{score} ƒëi·ªÉm**\n"
        f"üåü *Ng√¥i sao danh gi√°:* **{prestige_stars}**\n\n"
        f"‚ú® **C·∫£m ∆°n b·∫°n ƒë√£ tham gia GameFi Nh·∫≠p Vai!** ‚ú®"
    )
    if update.message:
        await update.message.reply_text(summary, parse_mode="Markdown")

# Main function
def main():
    TOKEN = "7595985963:AAGoUSk8pIpAiSDaQwTufWqmYs3Kvn5mmt4"
    application = Application.builder().token(TOKEN).build()

    logger.info("Bot is starting with token: %s", TOKEN)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(MessageHandler(TEXT & ~COMMAND, handle_choice))

    application.run_polling()

if __name__ == "__main__":
    logger.info("Bot is initializing...")
    main()
