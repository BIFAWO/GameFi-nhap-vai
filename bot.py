import logging
import requests
import csv
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes
from telegram.ext.filters import TEXT, COMMAND

# Logging setup
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets URL cho danh s√°ch Scenario
DECISION_POINTS_URL = "https://docs.google.com/spreadsheets/d/1sOqCrOl-kTKKQQ0ioYzYkqJwRM9qxsndxiLmo_RDZjI/export?format=csv&gid=0"

# H√†m t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets
def fetch_csv_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        decoded_content = response.content.decode("utf-8")
        data = list(csv.reader(decoded_content.splitlines(), delimiter=","))
        return data[1:]  # B·ªè d√≤ng ti√™u ƒë·ªÅ
    except Exception as e:
        logger.error(f"Error fetching data: {e}")
        return []

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['used_scenarios'] = set()
    context.user_data['scenario_count'] = 0

    await update.message.reply_text(
        "üéÆ **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi GameFi Nh·∫≠p Vai!** üéâ\n\n"
        "‚è© G√µ /play ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i!",
        parse_mode="Markdown"
    )

# /play command
async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data['scenario_count'] >= 10:
        await update.message.reply_text(
            "üèÅ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ 10 k·ªãch b·∫£n!\n"
            "C·∫£m ∆°n b·∫°n ƒë√£ ch∆°i.",
            parse_mode="Markdown"
        )
        return

    # L·∫•y danh s√°ch Scenario
    scenarios = fetch_csv_data(DECISION_POINTS_URL)
    if not scenarios:
        await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·ªãch b·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return

    # L·ªçc ra c√°c k·ªãch b·∫£n ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
    unused_scenarios = [s for s in scenarios if s[0] not in context.user_data['used_scenarios']]
    if not unused_scenarios:
        await update.message.reply_text("‚ö†Ô∏è Kh√¥ng c√≤n k·ªãch b·∫£n n√†o m·ªõi ƒë·ªÉ ch∆°i.")
        return

    # Ch·ªçn m·ªôt Scenario ng·∫´u nhi√™n
    scenario = random.choice(unused_scenarios)
    context.user_data['used_scenarios'].add(scenario[0])
    context.user_data['current_scenario'] = scenario
    context.user_data['scenario_count'] += 1

    # G·ª≠i k·ªãch b·∫£n cho ng∆∞·ªùi ch∆°i
    await update.message.reply_text(
        f"üó∫Ô∏è *K·ªãch b·∫£n {context.user_data['scenario_count']}*\n\n"
        f"{scenario[0]}\n\n"
        f"1Ô∏è‚É£ {scenario[1]}\n"
        f"2Ô∏è‚É£ {scenario[3]}\n\n"
        "‚è© Nh·∫≠p 1 ho·∫∑c 2 ƒë·ªÉ ch·ªçn.",
        parse_mode="Markdown"
    )

# X·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text.strip()
    current_scenario = context.user_data.get('current_scenario')

    # Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn k·ªãch b·∫£n hay ch∆∞a
    if not current_scenario:
        await update.message.reply_text("‚ùå Kh√¥ng c√≥ k·ªãch b·∫£n n√†o ƒëang ch·∫°y. G√µ /play ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        return

    # ƒê·∫£m b·∫£o l·ª±a ch·ªçn h·ª£p l·ªá
    if user_choice not in ['1', '2']:
        await update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2.")
        return

    # X·ª≠ l√Ω ph·∫£n h·ªìi d·ª±a tr√™n l·ª±a ch·ªçn
    chosen_option = current_scenario[1] if user_choice == '1' else current_scenario[3]
    await update.message.reply_text(
        f"‚úÖ B·∫°n ƒë√£ ch·ªçn: {chosen_option}.\n"
        f"‚è© Chuy·ªÉn sang k·ªãch b·∫£n ti·∫øp theo..."
    )

    # Ti·∫øp t·ª•c ch∆°i
    await play(update, context)

# Main function
def main():
    TOKEN = "7595985963:AAGoUSk8pIpAiSDaQwTufWqmYs3Kvn5mmt4"
    application = Application.builder().token(TOKEN).build()

    # Th√™m c√°c l·ªánh x·ª≠ l√Ω
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(MessageHandler(TEXT & ~COMMAND, handle_choice))

    # Ch·∫°y bot
    application.run_polling()

if __name__ == "__main__":
    main()
